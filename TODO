ROADMAP

= 5.4 =
* add disable post types
* make disable option work
* replace deleting rewrite rules, it's bad
* remove allowed domains check from news sitemap
* rearrange sitemap settings tab fields
* Rearrange sitemap help tabs (like news)
* fix advanced options failing
* add static files checks:
  - after plugin activation
  - on de/activation from settings reading

* test meta cache clearing (remove meta cache clear commented code)
* test conflicting plugins/themes messages
* test upgrade.php

TODO author sitemap lastmod === last publication date
TODO add help link to https://news.google.com/search?q=site:site.dom+when:2d to verify results
TODO make "hide empty" an option for taxonomy terms, see issue #40

Verify and remove unused:
*

TODO LIST

* prepare compatibility routine for additional premium modules
* add inline comment blocks for hooks

TODO test/fix outdated lastmod dates for post type sitemaps when Redis Cache is active
TODO fix WPML incompatibility https://wordpress.org/support/topic/multilingual-url-issue/
TODO core sitemap stylesheets per sitemap type (is that possible?)
TODO allow CPT taxonomies selection in news sitemap (PRO?)
TODO allow inclusion of taxonomies that belong to a post type that is not included (what??)

TODO revisit xmlsf_output_compression (can we force gzip over brotli when .gz is used?)

TODO start with namespacing and autoload
// http://justintadlock.com/archives/2018/12/14/php-namespaces-for-wordpress-developers
/*
spl_autoload_register( function( $class ) {

	$namespace = 'XMLSF\\';

	// Bail if the class is not in our namespace.
	if ( 0 !== strpos( $class, $namespace ) ) {
		return;
	}

	// Build the filename.
	$class = str_replace( $namespace, '', $class );
	$class = strtolower( $class );
	$class = str_replace( '_', '-', $class );
	$file = realpath( __DIR__ ) . DIRECTORY_SEPARATOR . 'inc' . DIRECTORY_SEPARATOR . 'class-' . $class . '.php';

	// If the file exists for the class name, load it.
	if ( file_exists( $file ) ) {
		include( $file );
	}
} );
*/


TODO Prime meta caches button:

if ( isset( $_POST['xmlsf-prime-post-meta'] ) ) {
	if ( xmlsf_verify_nonce( 'help' ) ) {
		// prime metadata
		xmlsf_sitemap()->prime_post_meta();
		// TODO split this into post types, and maybe into months?

		// TODO consider same approach for term meta

		add_settings_error( 'prime_meta_notice', 'prime_meta_notice', __( 'Sitemap post meta cache has been primed.', 'xml-sitemap-feed' ), 'updated' );
	}
}
// ADMIN BUTTON
<input type="submit" name="xmlsf-prime-post-meta" class="button button-small" value="<?php _e( 'Prime post meta caches', 'xml-sitemap-feed' ); ?>" />

/**
 * Prime post images and comment meta data
 *
 * @since 5.2
 *
 * @param string $post_type Post type slug
 * @param intval|null $m Year and month: YYYYMM
 *
public function prime_post_meta( $post_type = 'any', $m = null )
{
	// get our posts
	if ( !is_admin() && is_sitemap() ) {
		// we're a sitemap, so let's work with main query here
		global $wp_query;
		$posts = is_object( $wp_query) ? $wp_query->$posts : array();
	} else {
		$args = array(
			'post_type' => $post_type,
			'numberposts' => -1,
			'lang' => '',
			'update_cache' => false
		);
		if ( is_numeric( $m) ) $args['m'] = intval( $m);
		$posts = get_posts( $args );

		// try to raise memory limit, context added for filters
		//wp_raise_memory_limit( 'sitemap-posttype-'.$post_type ); // already on admin...
	}

	foreach ( $posts as $post ) {
		if ( ! array_key_exists( $post->post_type, $this->post_types) ) continue;

		// Update images meta
		//delete_post_meta( $post->ID, '_xmlsf_image_featured' );
		//delete_post_meta( $post->ID, '_xmlsf_image_attached' );

		if ( ! empty( $this->post_types[ $post->post_type ]['tags']['image'] ) ) {
			$which = $this->post_types[ $post->post_type ]['tags']['image'];

			$stored = (array) get_post_meta( $post->ID, '_xmlsf_image_'.$which );

			// populate images and add as meta data
			foreach ( xmlsf_images_data( $post, $which ) as $data ) {
				if ( ! in_array( $data, $stored ) )
					add_post_meta( $post->ID, '_xmlsf_image_'.$which, $data );
			}
		}

		// Update last comment date meta
		if ( ! empty( $this->post_types[ $post->post_type ]['update_lastmod_on_comments'] ) ) {
			// get latest post comment
			$comments = get_comments( array(
				'status' => 'approve',
				'number' => 1,
				'post_id' => $post->ID,
			) );

			if ( isset( $comments[0]->comment_date ) )
				update_post_meta( $post->ID, '_xmlsf_comment_date_gmt', $comments[0]->comment_date_gmt );
			//else
				//delete_post_meta( $post->ID, '_xmlsf_comment_date_gmt' );
		}
	}
}
*/
